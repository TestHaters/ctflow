import { ButtonNodeCompiler } from './cypress/ButtonNodeCompiler';
import { VisitPageNodeCompiler } from './cypress/VisitPageNodeCompiler';
import { TextInputNodeCompiler } from './cypress/TextInputNodeCompiler';
import { CheckboxNodeCompiler } from './cypress/CheckboxNodeCompiler';
import { ContainsNodeCompiler } from './cypress/ContainsNodeCompiler';
import { WaitNodeCompiler } from './cypress/WaitNodeCompiler';
import { Graph } from './helpers/graph';
import { CodeInjectionNodeCompiler } from './cypress/CodeInjectionNodeCompiler';
import CTFlowRecorderNode from '../nodes/CTFlowRecorderNode';
import { CTFlowRecorderCompiler } from './cypress/CTFlowRecorderCompiler';
import { CustomNodeCompiler } from './cypress/CustomNodeCompiler';

export class Compiler {
  // support multiple flow paths in a file
  static compile(store: any): string {
    let graph = new Graph(store.nodes, store.edges);
    let paths = graph.buildPaths();

    let compiledFlows = paths.map((path) => {
      let compiledText = '';

      // path is a list of node ids
      path.forEach((nodeId) => {
        const node = store.nodes[nodeId];
        const compiler = this.findCompiler(node);
        compiledText += compiler.compile(node) + '\n';
      });

      return compiledText;
    });

    return this.buildCypressJsFile(compiledFlows);
  }

  static buildCypressJsFile(compiledFlows: string[]): string {
    return `
		/// <reference types="cypress" />

		context('Generated By Ctflow', () => {
      ${compiledFlows.map((compiledText, index) => {
        return `it('Demo CtFlow ${index}', () => {
            ${compiledText}
          })`;
      })}
		})
		`;
  }

  static findCompiler(node: any): typeof ButtonNodeCompiler {
    console.log('Node: ', node);
    switch (node.type) {
      case 'ButtonNode': {
        return ButtonNodeCompiler;
      }
      case 'visitNode': {
        return VisitPageNodeCompiler;
      }
      case 'textInputType': {
        return TextInputNodeCompiler;
      }
      case 'checkboxNode': {
        return CheckboxNodeCompiler;
      }
      case 'containsNode': {
        return ContainsNodeCompiler;
      }
      case 'waitNode': {
        return WaitNodeCompiler;
      }
      case 'codeInjectionNode': {
        return CodeInjectionNodeCompiler;
      }
      case 'customNode': {
        return CustomNodeCompiler;
      }
      case 'CTFlowRecorderNode': {
        return CTFlowRecorderCompiler
      }
      default: {
        console.log(node, node.type);
        return ButtonNodeCompiler;
      }
    }
  }
}
